# funcionando com envio de e-mail 21-05
# vers√£o completa com todas as funcionalidades solicitadas
# vers√£o liberada para usu√°rio com corre√ß√£o de fuso hor√°rio e uso exclusivo de datas manuais


import streamlit as st
st.set_page_config(page_title="Entregas - Tempo de Perman√™ncia", layout="wide")

import pandas as pd
import os
import time
import uuid
import pytz
import bcrypt
import hashlib
import psycopg2
import smtplib
import socket
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta, timezone
from dateutil import parser
from psycopg2 import sql
from io import BytesIO

from streamlit_autorefresh import st_autorefresh
import streamlit_authenticator as stauth
from streamlit_cookies_manager import EncryptedCookieManager

from supabase import create_client, Client as SupabaseClient

# --- CONFIGURA√á√ïES DE E-MAIL DA KINGHOST ---
# Estas configura√ß√µes podem ser movidas para um arquivo .env se preferir
EMAIL_REMETENTE = "ticketclicklogtransportes@gmail.com"
EMAIL_SENHA = "hlossktfkqlsxepo"
SMTP_HOST = "smtp.gmail.com"
SMTP_PORT = 587

# Configurar timeout para opera√ß√µes de socket
socket.setdefaulttimeout(10)  # 10 segundos de timeout

# --- DEFINI√á√ÉO DO FUSO HOR√ÅRIO BRASILEIRO ---
# Usar este fuso hor√°rio em todas as opera√ß√µes de data/hora
FUSO_HORARIO_BRASIL = pytz.timezone("America/Sao_Paulo")

# --- SETUP DO COOKIE MANAGER ---
cookies = EncryptedCookieManager(
    prefix="meu_app_",  # Prefixo dos cookies
    password="chave-muito-secreta-para-cookies"  # Troque por uma senha forte
)
if not cookies.ready():
    st.stop()


# --- Fun√ß√£o para verificar se o cookie expirou ---
def is_cookie_expired(expiry_time_str):
    try:
        expiry_time = datetime.strptime(expiry_time_str, "%Y-%m-%d %H:%M:%S").replace(tzinfo=timezone.utc)
    except ValueError:
        # Caso o formato da data n√£o seja o esperado, lan√ßa erro
        return False
    return datetime.now(timezone.utc) > expiry_time


# --- Fun√ß√£o de autentica√ß√£o ---
def autenticar_usuario(nome_usuario, senha):
    try:
        dados_usuario = supabase.table("usuarios").select("*").eq("nome_usuario", nome_usuario).execute()

        if dados_usuario.data:
            usuario = dados_usuario.data[0]
            if verificar_senha(senha, usuario["senha_hash"]):
                return usuario
        return None
    except Exception:
        return None

# --- CONEX√ÉO COM O SUPABASE ---
url = "https://vismjxhlsctehpvgmata.supabase.co"  # ‚úÖ sua URL real, j√° sem o '>' no meio
key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZpc21qeGhsc2N0ZWhwdmdtYXRhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1NzA4NTIsImV4cCI6MjA2MjE0Njg1Mn0.zTjSWenfuVJTIixq2RThSUpqcHGfZWP2xkFDU3USPb0"  # ‚úÖ sua chave real (evite expor em p√∫blico!)
supabase = create_client = create_client(url, key)


# Fun√ß√£o para hash de senha
def hash_senha(senha):
    return bcrypt.hashpw(senha.encode(), bcrypt.gensalt()).decode()

# Criar usu√°rio via Supabase Auth e tabela `usuarios`
# Criar usu√°rio direto na tabela 'usuarios' (sem Supabase Auth)

# Fun√ß√£o para verificar se a senha fornecida corresponde ao hash
def verificar_senha(senha_fornecida, senha_hash):
    return bcrypt.checkpw(senha_fornecida.encode(), senha_hash.encode())
    
usuario_logado = "admin"  # Exemplo de nome de usu√°rio do admin logado
dados_usuario = {
    "nome_usuario": "admin",
    "senha_hash": "$2b$12$OqjiW19Pjd9.eGnFfmJSrW.TqX/pq6RmPjbsHbuZ56MzeP3dNKuyq"  # Exemplo de senha j√° hashada (gerada com bcrypt)
}
    
# Fun√ß√£o de autentica√ß√£o simples com mensagens
def autenticar_usuario(nome_usuario, senha):
    try:
        dados = supabase.table("usuarios").select("*").eq("nome_usuario", nome_usuario).execute()

        if dados.data:
            usuario = dados.data[0]
            if verificar_senha(senha, usuario["senha_hash"]):
                st.success("‚úÖ Logado com sucesso!")
                return usuario
        st.error("üõë Usu√°rio ou senha incorretos.")
        return None

    except Exception as e:
        st.error("Erro ao autenticar.")
        return None

# --- Interface de Login ---
def login():
    login_cookie = cookies.get("login")
    username_cookie = cookies.get("username")
    is_admin_cookie = cookies.get("is_admin")
    expiry_time_cookie = cookies.get("expiry_time")

    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown("<h1 style='text-align: center;'>üìù Entregas - Tempo de Perman√™ncia </h1>", unsafe_allow_html=True)

    # Se o login j√° foi feito e o cookie n√£o expirou, configura a sess√£o
    if login_cookie and username_cookie and not is_cookie_expired(expiry_time_cookie):
        st.session_state.login = True
        st.session_state.username = username_cookie
        st.session_state.is_admin = is_admin_cookie == "True"
        st.markdown(f"üëã **Bem-vindo, {st.session_state.username}!**")

        # Op√ß√£o de logout
        col1, col2, col3 = st.columns([6, 1, 1])
        with col3:
            if st.button("üîí Sair", key="logout_button"):
                # Limpa os cookies e faz logout
                cookies["login"] = ""
                cookies["username"] = ""
                cookies["is_admin"] = ""
                cookies["expiry_time"] = ""
                cookies.save()  # Salva a remo√ß√£o dos cookies
                st.session_state.login = False  # Atualiza a sess√£o para refletir o logout
                st.rerun()  # Redireciona para a p√°gina inicial
    else:
        # Se o usu√°rio n√£o estiver logado, exibe o formul√°rio de login
        with col2:
            st.markdown("##### Login")
            username = st.text_input("Usu√°rio")
            senha = st.text_input("Senha", type="password")

            if st.button("Entrar", key="login_button"):
                usuario = autenticar_usuario(username, senha)
                if usuario:
                    # Armazena as informa√ß√µes de login nos cookies
                    cookies["login"] = str(True)
                    cookies["username"] = usuario["nome_usuario"]
                    cookies["is_admin"] = str(usuario.get("is_admin", False))
                    expiry_time = datetime.now(timezone.utc) + timedelta(hours=24)
                    cookies["expiry_time"] = expiry_time.strftime("%Y-%m-%d %H:%M:%S")
                    cookies.save()
                    st.session_state.login = True  # Atualiza a sess√£o para indicar que o login foi bem-sucedido
                    st.rerun()  # Recarga a p√°gina ap√≥s login

        st.stop()  # Impede que o c√≥digo continue sendo executado ap√≥s login falhar


# --- Chama login antes de qualquer coisa ---
login()


# --- SE CHEGOU AQUI, USU√ÅRIO EST√Å AUTENTICADO ---
#--------------------------------------------------------------------------INICIO APP -------------------------------------------------------------


#- -- INICIALIZA√á√ÉO DE SESS√ÉO ---
if "ocorrencias_abertas" not in st.session_state:
    st.session_state.ocorrencias_abertas = []

if "ocorrencias_finalizadas" not in st.session_state:
    st.session_state.ocorrencias_finalizadas = []

if "historico_emails" not in st.session_state:
    st.session_state.historico_emails = []

if "focal_selecionado" not in st.session_state:
    st.session_state.focal_selecionado = None

# Inicializa√ß√£o da configura√ß√£o de tempo de envio de e-mail
if "tempo_envio_email" not in st.session_state:
    st.session_state.tempo_envio_email = 30  # Valor padr√£o: 30 minutos

# --- ABA NOVA OCORR√äNCIA ---
# Definir abas - a aba de notifica√ß√µes s√≥ aparece para admin
if st.session_state.is_admin:
    aba1, aba2, aba3, aba5, aba4, aba6, aba7, aba8 = st.tabs(["üìù Nova Ocorr√™ncia", "üìå Ocorr√™ncias em Aberto", "‚úÖ Ocorr√™ncias Finalizadas", "üìù Tickets por Focal", "üìä Configura√ß√µes", "üìß Notifica√ß√µes por E-mail", "üîÑ Cadastros",  "üìä Estat√≠stica"])
else:
    aba1, aba2, aba3, aba5, aba4, aba7 = st.tabs(["üìù Nova Ocorr√™ncia", "üìå Ocorr√™ncias em Aberto", "‚úÖ Ocorr√™ncias Finalizadas", "üìù Tickets por Focal", "üìä Configura√ß√µes", "üîÑ Cadastros"])

# Definindo a conex√£o com o banco de dados (ajuste com as suas credenciais)
def get_db_connection():
    try:
        conn = psycopg2.connect(
            dbname="nome_do_banco",
            user="usuario",
            password="senha",
            host="host_do_banco",
            port="porta"
        )
        return conn
    except Exception as e:
        st.error(f"Erro ao conectar ao banco de dados: {e}")
        return None

# --- FUN√á√ïES DE DATA E HORA COM FUSO HOR√ÅRIO ---

def obter_data_hora_atual_brasil():
    """Retorna a data e hora atual no fuso hor√°rio do Brasil."""
    return datetime.now(FUSO_HORARIO_BRASIL)

def converter_para_fuso_brasil(data_hora):
    """Converte uma data/hora para o fuso hor√°rio do Brasil."""
    if data_hora.tzinfo is None:
        # Se n√£o tiver fuso, assume UTC
        data_hora = data_hora.replace(tzinfo=timezone.utc)
    return data_hora.astimezone(FUSO_HORARIO_BRASIL)

def calcular_diferenca_tempo(data_hora_inicial, data_hora_final=None):
    """Calcula a diferen√ßa entre duas datas/horas no mesmo fuso hor√°rio."""
    if data_hora_final is None:
        data_hora_final = obter_data_hora_atual_brasil()
    
    # Garantir que ambas as datas est√£o no mesmo fuso
    if data_hora_inicial.tzinfo is None:
        data_hora_inicial = FUSO_HORARIO_BRASIL.localize(data_hora_inicial)
    else:
        data_hora_inicial = data_hora_inicial.astimezone(FUSO_HORARIO_BRASIL)
    
    if data_hora_final.tzinfo is None:
        data_hora_final = FUSO_HORARIO_BRASIL.localize(data_hora_final)
    else:
        data_hora_final = data_hora_final.astimezone(FUSO_HORARIO_BRASIL)
    
    return data_hora_final - data_hora_inicial

def criar_datetime_manual(data_str, hora_str):
    """Cria um objeto datetime a partir de strings de data e hora, com fuso hor√°rio do Brasil."""
    try:
        data_hora_str = f"{data_str} {hora_str}"
        data_hora = datetime.strptime(data_hora_str, "%Y-%m-%d %H:%M:%S")
        return FUSO_HORARIO_BRASIL.localize(data_hora)
    except Exception as e:
        st.error(f"Erro ao criar datetime manual: {e}")
        return None

# Fun√ß√£o de inser√ß√£o no Supabase
def inserir_ocorrencia_supabase(dados):
    # Criar data_hora_abertura a partir dos campos manuais
    data_hora_manual = criar_datetime_manual(dados["data_abertura_manual"], dados["hora_abertura_manual"])
    
    if data_hora_manual:
        # Usar a data/hora manual para todos os campos de data/hora
        data_hora_str = data_hora_manual.strftime("%Y-%m-%d %H:%M:%S")
        timestamp_iso = data_hora_manual.isoformat()
        
        response = supabase.table("ocorrencias").insert([{
            "id": dados["id"],
            "nota_fiscal": dados["nota_fiscal"],
            "cliente": dados["cliente"],
            "focal": dados["focal"],
            "destinatario": dados["destinatario"],
            "cidade": dados["cidade"],
            "motorista": dados["motorista"],
            "tipo_de_ocorrencia": dados["tipo_de_ocorrencia"],
            "observacoes": dados["observacoes"],
            "responsavel": dados["responsavel"],
            "status": "Aberta",
            "data_hora_abertura": data_hora_str,  # Usar data/hora manual
            "abertura_timestamp": timestamp_iso,  # Usar data/hora manual
            "permanencia": dados["permanencia"],
            "complementar": dados["complementar"],
            "data_abertura_manual": dados["data_abertura_manual"],
            "hora_abertura_manual": dados["hora_abertura_manual"],
            "email_abertura_enviado": False,
            "email_finalizacao_enviado": False
        }]).execute()
        return response
    else:
        st.error("Erro ao criar data/hora manual para inser√ß√£o no banco")
        return None


# --- CARREGAMENTO DE DADOS Tabelas com nomes de motorista e clientes ---
def carregar_clientes_supabase():
    try:
        response = supabase.table("clientes").select("cliente, focal, enviar_para_email, email_copia").execute()
        if response.data:
            df_clientes = pd.DataFrame(response.data)
            df_clientes = df_clientes.dropna(subset=["cliente"])
            return df_clientes
        else:
            return pd.DataFrame(columns=["cliente", "focal", "enviar_para_email", "email_copia"])
    except Exception as e:
        st.error(f"Erro ao carregar clientes do banco: {e}")
        return pd.DataFrame(columns=["cliente", "focal", "enviar_para_email", "email_copia"])

# Carregar dados
df_clientes = carregar_clientes_supabase()

# Dicion√°rios √∫teis
cliente_to_focal = dict(zip(df_clientes["cliente"], df_clientes["focal"]))
cliente_to_emails = {
    row["cliente"]: {
        "principal": row.get("enviar_para_email", ""),
        "copia": row.get("email_copia", "")
    }
    for _, row in df_clientes.iterrows()
}
clientes = df_clientes["cliente"].tolist()



# Buscar lista de cidades diretamente do Supabase
def carregar_cidades_supabase():
    try:
        response = supabase.table("cidades").select("cidade").execute()
        #st.write("‚úÖ Cidades no banco:", response.data)  # para debug
        if response.data:
            cidades = [item["cidade"] for item in response.data if item.get("cidade")]
            return sorted(set(cidades))  # Ordena e remove duplicados
        else:
            return []
    except Exception as e:
        st.error(f"Erro ao carregar cidades do banco: {e}")
        return []

cidades = carregar_cidades_supabase()


# Buscar lista de motoristas diretamente do Supabase
def carregar_motoristas_supabase():
    try:
        motoristas = []
        pagina = 0
        pagina_tamanho = 1000  # Supabase retorna no m√°ximo 1000 por requisi√ß√£o

        while True:
            resposta = supabase.table("motoristas") \
                .select("motorista") \
                .range(pagina * pagina_tamanho, (pagina + 1) * pagina_tamanho - 1) \
                .execute()

            dados = resposta.data
            if not dados:
                break

            motoristas.extend([item["motorista"].strip() for item in dados if item.get("motorista")])
            pagina += 1

        return sorted(set(motoristas))

    except Exception as e:
        st.error(f"Erro ao carregar motoristas do banco: {e}")
        return []



motoristas = carregar_motoristas_supabase()

try:
    resposta = supabase.table("motoristas").select("*").execute()
    
except Exception as e:
    st.error(f"Erro ao consultar a tabela motoristas: {e}")

# Buscar lista de focais diretamente do Supabase
def carregar_focal_supabase():
    try:
        response = supabase.table("clientes").select("focal").execute()
        if response.data:
            focais = [item["focal"] for item in response.data if item.get("focal")]
            return sorted(set(focais))
        else:
            return []
    except Exception as e:
        st.error(f"Erro ao carregar focais do banco: {e}")
        return []

# --- FUN√á√ïES PARA A ABA CADASTROS ---

def validar_texto_maiusculo(texto):
    """Verifica se o texto est√° em letras mai√∫sculas."""
    return texto == texto.upper()

def validar_email(email):
    """Verifica se o e-mail tem um formato v√°lido."""
    import re
    padrao = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(padrao, email) is not None

def validar_emails_multiplos(emails):
    """Verifica se m√∫ltiplos e-mails separados por ; t√™m formato v√°lido."""
    if not emails:
        return True
    
    import re
    padrao = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    
    for email in emails.split(';'):
        email = email.strip()
        if email and not re.match(padrao, email):
            return False
    
    return True

def inserir_motorista(motorista):
    """Insere um novo motorista no Supabase."""
    try:
        response = supabase.table("motoristas").insert({"motorista": motorista}).execute()
        return True, "Motorista cadastrado com sucesso!"
    except Exception as e:
        return False, f"Erro ao cadastrar motorista: {e}"

def inserir_cidade(cidade):
    """Insere uma nova cidade no Supabase."""
    try:
        response = supabase.table("cidades").insert({"cidade": cidade}).execute()
        return True, "Cidade cadastrada com sucesso!"
    except Exception as e:
        return False, f"Erro ao cadastrar cidade: {e}"

def inserir_cliente(cliente, focal, enviar_email, email_principal, email_copia):
    """Insere um novo cliente no Supabase."""
    try:
        response = supabase.table("clientes").insert({
            "cliente": cliente,
            "focal": focal,
            "enviar_para_email": email_principal,
            "email_copia": email_copia,
            "receber_emails": enviar_email
        }).execute()
        return True, "Cliente cadastrado com sucesso!"
    except Exception as e:
        return False, f"Erro ao cadastrar cliente: {e}"

def atualizar_tempo_envio_email(minutos):
    """Atualiza o tempo de envio de e-mail na configura√ß√£o."""
    try:
        # Atualiza na sess√£o
        st.session_state.tempo_envio_email = minutos
        
        # Atualiza no banco de dados (supondo que exista uma tabela de configura√ß√µes)
        response = supabase.table("configuracoes").upsert({
            "chave": "tempo_envio_email",
            "valor": str(minutos)
        }).execute()
        
        return True, f"Tempo de envio de e-mail atualizado para {minutos} minutos!"
    except Exception as e:
        return False, f"Erro ao atualizar tempo de envio de e-mail: {e}"

def carregar_tempo_envio_email():
    """Carrega o tempo de envio de e-mail da configura√ß√£o."""
    try:
        response = supabase.table("configuracoes").select("valor").eq("chave", "tempo_envio_email").execute()
        if response.data:
            return int(response.data[0]["valor"])
        else:
            return 30  # Valor padr√£o
    except Exception as e:
        st.error(f"Erro ao carregar tempo de envio de e-mail: {e}")
        return 30  # Valor padr√£o em caso de erro

# --- FORMUL√ÅRIO PARA NOVA OCORR√äNCIA ---

# =========================
#     ABA 1 - NOVA OCORRENCIA
# =========================
with aba1:
    st.header("Nova Ocorr√™ncia")

    # Definindo sess√£o focal_responsavel
    if "focal_responsavel" not in st.session_state:
        st.session_state["focal_responsavel"] = ""

    # Formul√°rio para nova ocorr√™ncia
    with st.form("form_nova_ocorrencia", clear_on_submit=True):
        col1, col2 = st.columns(2)

        with col1:
            nf = st.text_input("Nota Fiscal", key="nf")
            nf_invalida = nf != "" and not nf.isdigit()
            if nf_invalida:
                st.error("Por favor, insira apenas n√∫meros na Nota Fiscal.")

            destinatario = st.text_input("Destinat√°rio", key="destinatario")

            cliente_opcao = st.selectbox("Cliente", options=clientes + ["Outro ()"], index=None, key="cliente_opcao")
            cliente = st.text_input("Digite o nome do cliente", key="cliente_manual") if cliente_opcao == "Outro ()" else cliente_opcao

            if cliente_opcao and cliente_opcao in cliente_to_focal:
                st.session_state["focal_responsavel"] = cliente_to_focal[cliente_opcao]
            elif cliente_opcao:
                st.session_state["focal_responsavel"] = ""

            cidade_opcao = st.selectbox("Cidade", options=cidades + ["Outro (digitar manualmente)"], index=None, key="cidade_opcao")
            cidade = st.text_input("Digite o nome da cidade", key="cidade_manual") if cidade_opcao == "Outro (digitar manualmente)" else cidade_opcao


        with col2:
    # Depura√ß√£o: carregar todos os motoristas do banco e exibir a lista completa
            motoristas_brutos = supabase.table("motoristas").select("motorista").limit(40000).execute()

            if motoristas_brutos.data:
                # Extrai os nomes, remove nulos e espa√ßos extras
                motoristas = [item["motorista"].strip() for item in motoristas_brutos.data if item.get("motorista")]
                motoristas = sorted(set(motoristas))  # remove duplicatas e ordena

                # Exibir para depura√ß√£o (remova se n√£o quiser mostrar)
                motoristas = carregar_motoristas_supabase()
                #st.write("üîç Total de motoristas encontrados:", len(motoristas))
                #st.write("üìã Lista de motoristas:", motoristas)
            else:
                motoristas = []  # garante que a vari√°vel exista mesmo em caso de erro
                st.warning("‚ö†Ô∏è Nenhum motorista encontrado no banco.")

            # Criar lista final de op√ß√µes
            opcoes_motoristas = motoristas + ["Outro (digitar manualmente)"]

            # Exibir selectbox com chave √∫nica
            motorista_opcao = st.selectbox("Motorista", options=opcoes_motoristas, index=None, key="motorista_opcao")

            # Campo extra se escolher "Outro"
            motorista = st.text_input("Digite o nome do motorista", key="motorista_manual") if motorista_opcao == "Outro (digitar manualmente)" else motorista_opcao

            tipo = st.multiselect("Tipo de Ocorr√™ncia", options=["Chegada no Local", "Pedido Bloqueado", "Demora", "Diverg√™ncia"], key="tipo_ocorrencia")
            obs = st.text_area("Observa√ß√µes", key="observacoes")
            responsavel = st.session_state.username
            st.text_input("Quem est√° abrindo o ticket", value=responsavel, disabled=True)

            #### data e hora de abertura inserido manual #####
            st.markdown("")

            col_data, col_hora = st.columns(2)
            with col_data:
                data_abertura_manual = st.date_input("Data de Abertura", format="DD/MM/YYYY")
            with col_hora:
                hora_abertura_manual = st.time_input("Hora de Abertura")



        enviar = st.form_submit_button("Adicionar Ocorr√™ncia")


        # Valida√ß√µes
        if enviar:
            campos_obrigatorios = {
                "Nota Fiscal": nf,
                "Cliente": cliente,
                "Focal Respons√°vel": st.session_state["focal_responsavel"],
                "Destinat√°rio": destinatario,
                "Cidade": cidade,
                "Motorista": motorista,
                "Tipo de Ocorr√™ncia": tipo,
                "Respons√°vel": responsavel
            }

            faltando = [campo for campo, valor in campos_obrigatorios.items() if not valor]

            if nf_invalida:
                st.error("Ocorr√™ncia n√£o adicionada: Nota Fiscal deve conter apenas n√∫meros.")
            elif faltando:
                st.error(f"‚ùå Preencha todos os campos obrigat√≥rios: {', '.join(faltando)}")
            elif not cliente:  # Verifica√ß√£o adicional para o campo "Cliente"
                st.error("‚ùå O campo 'Cliente' √© obrigat√≥rio.")
        
            else:
                # Gera n√∫mero de ticket √∫nico baseado em data/hora
                numero_ticket = obter_data_hora_atual_brasil().strftime("%Y%m%d%H%M%S%f")  # Ex: 20250513151230543210

                # Formatar data e hora manual para string no formato esperado pelo banco
                data_abertura_manual_str = data_abertura_manual.strftime("%Y-%m-%d")
                hora_abertura_manual_str = hora_abertura_manual.strftime("%H:%M:%S")

                # Montagem do dicion√°rio de nova ocorr√™ncia
                nova_ocorrencia = {
                    "id": str(uuid.uuid4()),
                    "numero_ticket": numero_ticket, #numero ticket
                    "nota_fiscal": nf,
                    "cliente": cliente,
                    "focal": st.session_state["focal_responsavel"],
                    "destinatario": destinatario,
                    "cidade": cidade,
                    "motorista": motorista,
                    "tipo_de_ocorrencia": ", ".join(tipo),
                    "observacoes": obs,
                    "responsavel": responsavel,
                    "data_abertura_manual": data_abertura_manual_str, # data abertura inserido manual
                    "hora_abertura_manual": hora_abertura_manual_str, # hora abertura inserido manual
                    "complementar": "",
                    "permanencia": "",
                }

                # Inser√ß√£o no banco de dados
                response = inserir_ocorrencia_supabase(nova_ocorrencia)
                
                if response and response.data:
                    # Adiciona localmente para exibi√ß√£o imediata
                    nova_ocorrencia_local = nova_ocorrencia.copy()
                    nova_ocorrencia_local["Data/Hora Finaliza√ß√£o"] = ""
                    st.session_state.ocorrencias_abertas.append(nova_ocorrencia_local)

                    st.session_state["focal_responsavel"] = ""

                    sucesso = st.empty()
                    sucesso.success("‚úÖ Ocorr√™ncia aberta com sucesso!")
                    time.sleep(2)
                    sucesso.empty()
                    
                    # Verificar se precisa enviar e-mail (mais de 30 minutos)
                    #verificar_e_enviar_email_abertura(nova_ocorrencia)
                else:
                    st.error(f"Erro ao salvar ocorr√™ncia no Supabase: {response.error if response else 'Erro desconhecido'}")

# =========================
#    FUN√á√ÉO CLASSIFICA√á√ÉO
# =========================
def classificar_ocorrencia_por_tempo(data_str, hora_str):
    try:
        # Criar datetime a partir das strings de data e hora
        data_hora = criar_datetime_manual(data_str, hora_str)
        if not data_hora:
            return "Erro", "gray"
        
        # Calcula a diferen√ßa de tempo com a hora atual do Brasil
        agora = obter_data_hora_atual_brasil()
        diferenca = calcular_diferenca_tempo(data_hora, agora)
        
        # Classifica com base no tempo decorrido (novos intervalos)
        if diferenca <= timedelta(minutes=15):
            return "At√© 15min", "#2ecc71"  # Verde
        elif diferenca <= timedelta(minutes=30):
            return "15-30min", "#f39c12"  # Laranja
        elif diferenca <= timedelta(minutes=45):
            return "30-45min", "#e74c3c"  # Vermelho
        else:
            return "Mais de 45min", "#800000"  # Vermelho escuro
            
    except Exception as e:
        print(f"Erro ao classificar ocorr√™ncia: {e}")
        return "Erro", "gray"


# =========================
#    FUN√á√ïES DE E-MAIL
# =========================

def carregar_dados_clientes_email():
    try:
        response = supabase.table("clientes").select("cliente, enviar_para_email, email_copia").execute()
        if response.data:
            return {
                item["cliente"]: {
                    "principal": item.get("enviar_para_email", ""),
                    "copia": item.get("email_copia", "")
                }
                for item in response.data if item.get("enviar_para_email")
            }
        else:
            return {}
    except Exception as e:
        st.error(f"Erro ao carregar e-mails dos clientes: {e}")
        return {}


def obter_ocorrencias_abertas_30min():
    """Obt√©m ocorr√™ncias abertas h√° mais de 30 minutos que ainda n√£o receberam e-mail."""
    try:
        # Obter todas as ocorr√™ncias abertas que ainda n√£o receberam e-mail
        response = supabase.table("ocorrencias").select("*").eq("status", "Aberta").eq("email_abertura_enviado", False).execute()
        ocorrencias = response.data
        
        # Filtrar ocorr√™ncias abertas h√° mais de 30 minutos
        ocorrencias_30min = []
        agora = obter_data_hora_atual_brasil()
        
        for ocorr in ocorrencias:
            # Verificar se tem data e hora manual
            if ocorr.get("data_abertura_manual") and ocorr.get("hora_abertura_manual"):
                try:
                    # Criar datetime a partir das strings de data e hora manual
                    data_hora_abertura = criar_datetime_manual(
                        ocorr["data_abertura_manual"], 
                        ocorr["hora_abertura_manual"]
                    )
                    
                    if data_hora_abertura:
                        # Verificar se passou mais de 30 minutos
                        diferenca = calcular_diferenca_tempo(data_hora_abertura, agora)
                        if diferenca > timedelta(minutes=30):
                            ocorrencias_30min.append(ocorr)
                except Exception as e:
                    st.error(f"Erro ao processar data/hora da ocorr√™ncia {ocorr.get('nota_fiscal', '-')}: {e}")
        
        return ocorrencias_30min
    except Exception as e:
        st.error(f"Erro ao obter ocorr√™ncias abertas: {e}")
        return []

def marcar_email_como_enviado(ocorrencia_id, tipo="abertura"):
    """Marca a ocorr√™ncia como tendo recebido e-mail."""
    try:
        campo = "email_abertura_enviado" if tipo == "abertura" else "email_finalizacao_enviado"
        response = supabase.table("ocorrencias").update({
            campo: True
        }).eq("id", ocorrencia_id).execute()
        
        return response.data is not None
    except Exception as e:
        st.error(f"Erro ao atualizar status de e-mail enviado: {e}")
        return False

def enviar_email(destinatario, copia, assunto, corpo):
    """Envia e-mail usando as configura√ß√µes da KingHost."""
    try:
        # Criar mensagem
        msg = MIMEMultipart()
        msg['From'] = EMAIL_REMETENTE
        msg['To'] = destinatario
        
        # Adicionar c√≥pias se existirem
        if copia:
            # Separar m√∫ltiplos e-mails em CC (separados por ponto e v√≠rgula)
            emails_cc = [email.strip() for email in copia.split(';') if email.strip()]
            if emails_cc:
                msg['Cc'] = ', '.join(emails_cc)
        
        msg['Subject'] = assunto
        
        # Adicionar corpo do e-mail
        msg.attach(MIMEText(corpo, 'html'))
        
        # Conectar ao servidor SMTP com timeout
        server = smtplib.SMTP(SMTP_HOST, SMTP_PORT, timeout=10)
        server.starttls()
        server.login(EMAIL_REMETENTE, EMAIL_SENHA)
        
        # Determinar todos os destinat√°rios (principal + c√≥pias)
        todos_destinatarios = [destinatario]
        if copia:
            todos_destinatarios.extend([email.strip() for email in copia.split(';') if email.strip()])
        
        # Enviar e-mail
        server.sendmail(EMAIL_REMETENTE, todos_destinatarios, msg.as_string())
        server.quit()
        
        return True, "E-mail enviado com sucesso"
    except socket.timeout:
        return False, "Timeout ao conectar ao servidor SMTP. Poss√≠vel bloqueio de firewall."
    except smtplib.SMTPAuthenticationError:
        return False, "Falha na autentica√ß√£o. Verifique usu√°rio e senha."
    except Exception as e:
        return False, f"Erro ao enviar e-mail: {e}"

def verificar_e_enviar_email_abertura(ocorrencia):
    """Verifica se a ocorr√™ncia precisa de e-mail e envia se necess√°rio."""
    try:
        # Verificar se j√° passou 30 minutos desde a abertura
        agora = obter_data_hora_atual_brasil()
        
        if ocorrencia.get("data_abertura_manual") and ocorrencia.get("hora_abertura_manual"):
            # Criar datetime a partir das strings de data e hora manual
            data_hora_abertura = criar_datetime_manual(
                ocorrencia["data_abertura_manual"], 
                ocorrencia["hora_abertura_manual"]
            )
            
            if not data_hora_abertura:
                return False, "Erro ao criar datetime a partir de data/hora manual"
            
            # Verificar se passou mais de 30 minutos
            diferenca = calcular_diferenca_tempo(data_hora_abertura, agora)
            if diferenca > timedelta(minutes=30):
                # Carregar dados do cliente
                clientes_emails = carregar_dados_clientes_email()
                cliente = ocorrencia.get('cliente')
                
                if cliente in clientes_emails:
                    email_info = clientes_emails[cliente]
                    email_principal = email_info['principal']
                    email_copia = email_info['copia']
                    
                    # Formatar data/hora para exibi√ß√£o
                    data_hora_str = f"{ocorrencia['data_abertura_manual']} {ocorrencia['hora_abertura_manual']}"
                    
                    # Criar corpo do e-mail
                    corpo_html = f"""
                    <html>
                    <head>
                        <style>
                            body {{ font-family: Arial, sans-serif; }}
                            table {{ border-collapse: collapse; width: 100%; }}
                            th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                            th {{ background-color: #f2f2f2; }}
                            .header {{ background-color: #f08104; color: white; padding: 10px; }}
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <h2>Notifica√ß√£o de Ocorr√™ncia Aberta</h2>
                        </div>
                        <p>Prezado cliente <strong>{cliente}</strong>,</p>
                        <p>O ve√≠culo com a entrega abaixo identificada encontra-se no ponto de descarga a 30min.</p>
                        <p>Ap√≥s 45 min de tempo de perman√™ncia haver√° aplica√ß√£o da TDE conforme especificado</p>
                        <p>em tabela. Pedimos sua interfer√™ncia no processo de descarga para evitar custos extras.</p>
                        <table>
                            <tr>
                                <th>Ticket</th>
                                <th>Nota Fiscal</th>
                                <th>Destinat√°rio</th>
                                <th>Cidade</th>
                                <th>Motorista</th>
                                <th>Tipo</th>
                                <th>Data/Hora Abertura</th>
                            </tr>
                            <tr>
                                <td>{ocorrencia.get('numero_ticket', '-')}</td>
                                <td>{ocorrencia.get('nota_fiscal', '-')}</td>
                                <td>{ocorrencia.get('destinatario', '-')}</td>
                                <td>{ocorrencia.get('cidade', '-')}</td>
                                <td>{ocorrencia.get('motorista', '-')}</td>
                                <td>{ocorrencia.get('tipo_de_ocorrencia', '-')}</td>
                                <td>{data_hora_str}</td>
                            </tr>
                        </table>
                        <p>Por favor, entre em contato conosco para mais informa√ß√µes.</p>
                        <p>Atenciosamente,<br>Equipe de Monitoramento ClikLog Transportes</p>
                    </body>
                    </html>
                    """
                    
                    # Enviar e-mail
                    assunto = f"Notifica√ß√£o: Ocorr√™ncia Aberta - {cliente} - NF {ocorrencia.get('nota_fiscal', '-')}"
                    sucesso, mensagem = enviar_email(email_principal, email_copia, assunto, corpo_html)
                    
                    if sucesso:
                        # Marcar como enviado no banco
                        marcar_email_como_enviado(ocorrencia["id"], "abertura")
                        
                        # Registrar no hist√≥rico
                        supabase.table("emails_enviados").insert({
                            "data": obter_data_hora_atual_brasil().strftime("%d-%m-%Y %H:%M:%S"),
                            "tipo": "Abertura",
                            "cliente": cliente,
                            "email": email_principal,
                            "ticket": ocorrencia.get('numero_ticket', '-'),
                            "nota_fiscal": ocorrencia.get('nota_fiscal', '-'),
                            "status": "Enviado"
                        })
                        
                        return True, "E-mail enviado com sucesso"
                    else:
                        return False, mensagem
                else:
                    return False, "Cliente n√£o possui e-mail cadastrado"
            else:
                return False, f"Ocorr√™ncia aberta h√° menos de 30 minutos (diferen√ßa: {diferenca})"
        else:
            return False, "Dados de data/hora de abertura ausentes"
    except Exception as e:
        return False, f"Erro ao verificar e enviar e-mail: {e}"

def enviar_email_finalizacao(ocorrencia):
    """Envia e-mail de finaliza√ß√£o para o cliente."""
    try:
        # Carregar dados do cliente
        clientes_emails = carregar_dados_clientes_email()
        cliente = ocorrencia.get('cliente')
        
        if cliente in clientes_emails:
            email_info = clientes_emails[cliente]
            email_principal = email_info['principal']
            email_copia = email_info['copia']
            
            # Obter dados de abertura e finaliza√ß√£o
            data_abertura = f"{ocorrencia.get('data_abertura_manual', '-')} {ocorrencia.get('hora_abertura_manual', '-')}"
            data_finalizacao = f"{ocorrencia.get('data_finalizacao_manual', '-')} {ocorrencia.get('hora_finalizacao_manual', '-')}"
            
            # Criar corpo do e-mail
            corpo_html = f"""
            <html>
            <head>
                <style>
                    body {{ font-family: Arial, sans-serif; }}
                    table {{ border-collapse: collapse; width: 100%; }}
                    th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                    th {{ background-color: #f2f2f2; }}
                    .header {{ background-color: #4CAF50; color: white; padding: 10px; }}
                </style>
            </head>
            <body>
                <div class="header">
                    <h2>Notifica√ß√£o de Ocorr√™ncia Finalizada</h2>
                </div>
                <p>Prezado cliente <strong>{cliente}</strong>,</p>
                <p>Informamos que a seguinte ocorr√™ncia foi finalizada:</p>
                <table>
                    <tr>
                        <th>Ticket</th>
                        <th>Nota Fiscal</th>
                        <th>Destinat√°rio</th>
                        <th>Cidade</th>
                        <th>Motorista</th>
                        <th>Tipo</th>
                        <th>Data/Hora Abertura</th>
                        <th>Data/Hora Finaliza√ß√£o</th>
                        <th>Perman√™ncia</th>
                    </tr>
                    <tr>
                        <td>{ocorrencia.get('numero_ticket', '-')}</td>
                        <td>{ocorrencia.get('nota_fiscal', '-')}</td>
                        <td>{ocorrencia.get('destinatario', '-')}</td>
                        <td>{ocorrencia.get('cidade', '-')}</td>
                        <td>{ocorrencia.get('motorista', '-')}</td>
                        <td>{ocorrencia.get('tipo_de_ocorrencia', '-')}</td>
                        <td>{data_abertura}</td>
                        <td>{data_finalizacao}</td>
                        <td>{ocorrencia.get('permanencia_manual', '-')}</td>
                    </tr>
                </table>
                <p><strong>Complemento:</strong> {ocorrencia.get('complementar', 'Sem complemento.')}</p>
                <p>Atenciosamente,<br>Equipe de Monitoramento ClikLog Transportes</p>
            </body>
            </html>
            """
            
            # Enviar e-mail
            assunto = f"Notifica√ß√£o: Ocorr√™ncia Finalizada - {cliente} - NF {ocorrencia.get('nota_fiscal', '-')}"
            sucesso, mensagem = enviar_email(email_principal, email_copia, assunto, corpo_html)
            
            if sucesso:
                marcar_email_como_enviado(ocorrencia["id"], "finalizacao")

                # Registrar no Supabase
                supabase.table("emails_enviados").insert({
                    "data_hora": obter_data_hora_atual_brasil().isoformat(),
                    "tipo": "Finaliza√ß√£o",
                    "cliente": cliente,
                    "email": email_principal,
                    "ticket": ocorrencia.get('numero_ticket', '-'),
                    "nota_fiscal": ocorrencia.get('nota_fiscal', '-'),
                    "status": "Enviado"
                }).execute()


                
                return True, "E-mail de finaliza√ß√£o enviado com sucesso"
            else:
                return False, mensagem
        else:
            return False, "Cliente n√£o possui e-mail cadastrado"
    except Exception as e:
        return False, f"Erro ao enviar e-mail de finaliza√ß√£o: {e}"

def notificar_ocorrencias_abertas():
    """Notifica clientes sobre ocorr√™ncias abertas h√° mais de 30 minutos e atualiza o status no banco."""
    resultados = []
    
    # Obter ocorr√™ncias abertas h√° mais de 30 minutos que ainda n√£o receberam e-mail
    ocorrencias = obter_ocorrencias_abertas_30min()
    
    if not ocorrencias:
        return [{"status": "info", "mensagem": "N√£o h√° ocorr√™ncias abertas h√° mais de 30 minutos que precisem de notifica√ß√£o."}]
    
    # Enviar e-mail para cada ocorr√™ncia individualmente
    for ocorr in ocorrencias:
        sucesso, mensagem = verificar_e_enviar_email_abertura(ocorr)
        
        resultados.append({
            "cliente": ocorr.get('cliente'),
            "ticket": ocorr.get('numero_ticket', '-'),
            "nota_fiscal": ocorr.get('nota_fiscal', '-'),
            "status": "sucesso" if sucesso else "erro",
            "mensagem": mensagem
        })
    
    return resultados

def testar_conexao_smtp():
    """Testa apenas a conex√£o com o servidor SMTP."""
    try:
        # Tentar conectar ao servidor
        server = smtplib.SMTP(SMTP_HOST, SMTP_PORT, timeout=5)
        
        # Tentar iniciar TLS
        server.starttls()
        
        # Tentar autenticar
        server.login(EMAIL_REMETENTE, EMAIL_SENHA)
        
        # Fechar conex√£o
        server.quit()
        return True, "Conex√£o SMTP testada com sucesso!"
    except socket.timeout:
        return False, "Timeout ao conectar ao servidor SMTP. Poss√≠vel bloqueio de firewall."
    except smtplib.SMTPAuthenticationError:
        return False, "Falha na autentica√ß√£o. Verifique usu√°rio e senha."
    except smtplib.SMTPException as e:
        return False, f"Erro SMTP: {e}"
    except Exception as e:
        return False, f"Erro desconhecido: {e}"

# Fun√ß√£o para carregar ocorr√™ncias abertas
def carregar_ocorrencias_abertas():
    try:
        response = supabase.table("ocorrencias").select("*").eq("status", "Aberta").order("data_hora_abertura", desc=True).execute()
        return response.data
    except Exception as e:
        st.error(f"Erro ao carregar ocorr√™ncias abertas: {e}")
        return []

# Fun√ß√£o para carregar ocorr√™ncias por focal
def carregar_ocorrencias_por_focal(focal=None):
    try:
        if focal:
            response = supabase.table("ocorrencias").select("*").eq("status", "Aberta").eq("focal", focal).order("data_hora_abertura", desc=True).execute()
        else:
            response = supabase.table("ocorrencias").select("*").eq("status", "Aberta").order("data_hora_abertura", desc=True).execute()
        
        return response.data
    except Exception as e:
        st.error(f"Erro ao carregar ocorr√™ncias por focal: {e}")
        return []

# Fun√ß√£o para obter lista de focais com contagem de tickets
def obter_focais_com_contagem():
    try:
        ocorrencias = carregar_ocorrencias_abertas()
        
        # Agrupar por focal e contar
        focais_contagem = {}
        for ocorr in ocorrencias:
            focal = ocorr.get('focal')
            if focal:
                if focal not in focais_contagem:
                    focais_contagem[focal] = 0
                focais_contagem[focal] += 1
        
        # Ordenar por contagem (decrescente)
        focais_ordenados = sorted(focais_contagem.items(), key=lambda x: x[1], reverse=True)
        
        return focais_ordenados
    except Exception as e:
        st.error(f"Erro ao obter focais com contagem: {e}")
        return []

# Fun√ß√£o para finalizar ocorr√™ncia
def finalizar_ocorrencia(ocorr, complemento, data_finalizacao_manual, hora_finalizacao_manual):
    try:
        data_abertura_manual = ocorr.get("data_abertura_manual")
        hora_abertura_manual = ocorr.get("hora_abertura_manual")
        
        if not data_abertura_manual or not hora_abertura_manual:
            return False, "Data/hora de abertura manual ausente. N√£o √© poss√≠vel calcular a perman√™ncia."
        
        try:
            # Converter string para datetime com fuso hor√°rio do Brasil
            try:
                data_hora_finalizacao = datetime.strptime(
                    f"{data_finalizacao_manual} {hora_finalizacao_manual}", "%d-%m-%Y %H:%M"
                )
                data_hora_finalizacao = FUSO_HORARIO_BRASIL.localize(data_hora_finalizacao)
            except ValueError:
                return False, "Formato inv√°lido para data/hora de finaliza√ß√£o. Use DD-MM-AAAA para a data e HH:MM para a hora."
            
            # Converter data/hora de abertura para datetime com fuso hor√°rio do Brasil
            data_hora_abertura = criar_datetime_manual(data_abertura_manual, hora_abertura_manual)
            if not data_hora_abertura:
                return False, "Erro ao criar datetime a partir de data/hora de abertura manual."
            
            if data_hora_finalizacao < data_hora_abertura:
                return False, "Data/hora de finaliza√ß√£o n√£o pode ser menor que a data/hora de abertura."
            
            # Calcular diferen√ßa de tempo no mesmo fuso hor√°rio
            delta = calcular_diferenca_tempo(data_hora_abertura, data_hora_finalizacao)
            total_segundos = int(delta.total_seconds())

            horas = total_segundos // 3600
            minutos = (total_segundos % 3600) // 60
            segundos = total_segundos % 60

            permanencia_manual = f"{horas:02d}:{minutos:02d}:{segundos:02d}"

            # Formatar para o banco
            data_finalizacao_banco = data_hora_finalizacao.strftime("%Y-%m-%d")
            hora_finalizacao_banco = data_hora_finalizacao.strftime("%H:%M:%S")
            
            # Atualizar no banco
            response = supabase.table("ocorrencias").update({
                "data_hora_finalizacao": data_hora_finalizacao.strftime("%Y-%m-%d %H:%M"),
                "finalizado_por": st.session_state.username,
                "complementar": complemento,
                "status": "Finalizada",
                "permanencia_manual": permanencia_manual,
                "data_finalizacao_manual": data_finalizacao_banco,
                "hora_finalizacao_manual": hora_finalizacao_banco,
                "email_finalizacao_enviado": False  # Inicializa como n√£o enviado
            }).eq("id", ocorr["id"]).execute()
            
            if response and response.data:
                # Enviar e-mail de finaliza√ß√£o
                ocorr_atualizada = response.data[0]
                enviar_email_finalizacao(ocorr_atualizada)
                
                return True, "Ocorr√™ncia finalizada com sucesso!"
            else:
                return False, "Erro ao salvar a finaliza√ß√£o no banco de dados."
        except Exception as e:
            return False, f"Erro ao calcular ou salvar perman√™ncia manual: {e}"
    except Exception as e:
        return False, f"Erro ao finalizar ocorr√™ncia: {e}"

# =========================
#     ABA 2 - EM ABERTO
# =========================
with aba2:
    st.header("Ocorr√™ncias em Aberto")

    ocorrencias_abertas = carregar_ocorrencias_abertas()
    
    # Verificar e enviar e-mails para ocorr√™ncias abertas h√° mais de 30 minutos
    for ocorr in ocorrencias_abertas:
        if not ocorr.get("email_abertura_enviado", False):
            verificar_e_enviar_email_abertura(ocorr)

    if not ocorrencias_abertas:
        st.info("‚ÑπÔ∏è Nenhuma ocorr√™ncia aberta no momento.")
    else:
        num_colunas = 4
        colunas = st.columns(num_colunas)
        st_autorefresh(interval=40000, key="ocorrencias_abertas_refresh")

        for idx, ocorr in enumerate(ocorrencias_abertas):
            status = "Data manual ausente"
            cor = "gray"
            abertura_manual_formatada = "N√£o informada"
            data_abertura_manual = ocorr.get("data_abertura_manual")
            hora_abertura_manual = ocorr.get("hora_abertura_manual")

            if data_abertura_manual and hora_abertura_manual:
                try:
                    # Criar datetime a partir das strings de data e hora manual
                    dt_manual = criar_datetime_manual(data_abertura_manual, hora_abertura_manual)
                    if dt_manual:
                        abertura_manual_formatada = dt_manual.strftime("%d-%m-%Y %H:%M:%S")

                        # Classifica√ß√£o por tempo com base nas datas manuais
                        status, cor = classificar_ocorrencia_por_tempo(data_abertura_manual, hora_abertura_manual)
                    else:
                        status = "Erro"
                        cor = "gray"

                except Exception as e:
                    st.error(f"Erro ao processar data/hora manual da ocorr√™ncia {ocorr.get('nota_fiscal', '-')}: {e}")
                    status = "Erro"
                    cor = "gray"

            with colunas[idx % num_colunas]:
                safe_idx = f"{idx}_{ocorr.get('nota_fiscal', '')}"

                with st.container():
                    # Adicionar indicador de e-mail enviado
                    email_enviado = ocorr.get('email_abertura_enviado', False)
                    email_status = "üìß E-mail enviado" if email_enviado else ""
                    
                    st.markdown(
                        f"""
                        <div style='background-color:{cor};padding:10px;border-radius:10px;color:white;
                        box-shadow: 0 4px 10px rgba(0,0,0,0.3);margin-bottom:5px;min-height:250px;font-size:15px;'>
                        <strong>Ticket #:</strong> {ocorr.get('numero_ticket', 'N/A')}<br>
                        <strong>Status:</strong> <span style='background-color:#2c3e50;padding:4px 8px;
                        border-radius:1px;color:white;'>{status}</span> {email_status}<br>
                        <strong>NF:</strong> {ocorr.get('nota_fiscal', '-')}<br>
                        <strong>Cliente:</strong> {ocorr.get('cliente', '-')}<br>
                        <strong>Destinat√°rio:</strong> {ocorr.get('destinatario', '-')}<br>
                        <strong>Focal:</strong> {ocorr.get('focal', '-')}<br>
                        <strong>Cidade:</strong> {ocorr.get('cidade', '-')}<br>
                        <strong>Motorista:</strong> {ocorr.get('motorista', '-')}<br>
                        <strong>Tipo:</strong> {ocorr.get('tipo_de_ocorrencia', '-')}<br>
                        <strong>Aberto por:</strong> {ocorr.get('responsavel', '-')}<br>
                        <strong>Data Abertura:</strong> {abertura_manual_formatada.split(" ")[0] if abertura_manual_formatada != "N√£o informada" else 'N√£o informada'}<br>
                        <strong>Hora Abertura:</strong> {hora_abertura_manual or 'N√£o informada'}<br> 
                        <strong>Observa√ß√µes:</strong> {ocorr.get('observacoes', 'Sem observa√ß√µes.')}<br>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )

                with st.expander("Finalizar Ocorr√™ncia"):
                    data_atual = obter_data_hora_atual_brasil().strftime("%d-%m-%Y")
                    hora_atual = obter_data_hora_atual_brasil().strftime("%H:%M")
                    data_finalizacao_manual = st.text_input("Data Finaliza√ß√£o (DD-MM-AAAA)", value=data_atual, key=f"data_final_{safe_idx}")
                    hora_finalizacao_manual = st.text_input("Hora Finaliza√ß√£o (HH:MM)", value=hora_atual, key=f"hora_final_{safe_idx}")

                    complemento_key = f"complemento_final_{safe_idx}"
                    if complemento_key not in st.session_state:
                        st.session_state[complemento_key] = ""

                    complemento = st.text_area("Complementar", key=complemento_key, value=st.session_state[complemento_key])
                    finalizar_disabled = not complemento.strip()

                    if st.button("Finalizar", key=f"finalizar_{safe_idx}", disabled=finalizar_disabled):
                        if finalizar_disabled:
                            st.error("‚ùå O campo 'Complementar' √© obrigat√≥rio para finalizar a ocorr√™ncia.")
                        else:
                            sucesso, mensagem = finalizar_ocorrencia(
                                ocorr, 
                                complemento, 
                                data_finalizacao_manual, 
                                hora_finalizacao_manual
                            )
                            
                            if sucesso:
                                st.success(mensagem)
                                time.sleep(2)
                                st.rerun()
                            else:
                                st.error(mensagem)

# =============================== 
#    FUN√á√ÉO CARREGAR FINALIZADAS 
# ===============================        
def carregar_ocorrencias_finalizadas():
    try:
        response = supabase.table("ocorrencias").select("*").eq("status", "Finalizada").order("data_hora_finalizacao", desc=True).execute()
        return response.data
    except Exception as e:
        st.error(f"Erro ao carregar ocorr√™ncias finalizadas: {e}")
        return []


# =========================
#     ABA 3 - FINALIZADAS
# =========================
with aba3:
    st.header("Ocorr√™ncias Finalizadas")

    try:
        ocorrencias_finalizadas = carregar_ocorrencias_finalizadas()
    except Exception as e:
        st.error(f"Erro ao carregar ocorr√™ncias finalizadas: {e}")
        st.stop()

    if not ocorrencias_finalizadas:
        st.info("‚ÑπÔ∏è Nenhuma ocorr√™ncia finalizada.")
    else:
        # --- Filtros e exporta√ß√£o ---
        col1, col2 = st.columns([1, 2])
        with col1:
            filtro_nf = st.text_input("üîé Pesquisar por NF:", "", max_chars=10)
        with col2:
            if st.button("üì§ Exportar Excel"):
                try:
                    df = pd.DataFrame(ocorrencias_finalizadas)
                    output = BytesIO()
                    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                        df.to_excel(writer, index=False, sheet_name='Finalizadas')
                    st.download_button(
                        label="‚¨áÔ∏è Baixar Relat√≥rio Excel",
                        data=output.getvalue(),
                        file_name="ocorrencias_finalizadas.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    )
                except Exception as e:
                    st.error(f"Erro ao exportar para Excel: {e}")

        # --- Filtrar ---
        if filtro_nf:
            ocorrencias_filtradas = [
                ocorr for ocorr in ocorrencias_finalizadas
                if filtro_nf.lower() in str(ocorr.get("nota_fiscal", "")).lower()
            ]
        else:
            ocorrencias_filtradas = ocorrencias_finalizadas

        num_colunas = 4
        for i in range(0, len(ocorrencias_filtradas), num_colunas):
            linha = ocorrencias_filtradas[i:i+num_colunas]
            colunas = st.columns(num_colunas)

            for idx, ocorr in enumerate(linha):
                try:
                    # --- Datas manuais ---
                    data_abertura_manual = "-"
                    hora_abertura_manual = "-"
                    if ocorr.get("data_abertura_manual") and ocorr.get("hora_abertura_manual"):
                        try:
                            # Criar datetime a partir das strings de data e hora manual
                            abertura_dt = criar_datetime_manual(
                                ocorr["data_abertura_manual"], 
                                ocorr["hora_abertura_manual"]
                            )
                            if abertura_dt:
                                data_abertura_manual = abertura_dt.strftime("%d-%m-%Y")
                                hora_abertura_manual = abertura_dt.strftime("%H:%M:%S")
                        except:
                            pass

                    data_finalizacao_manual = "-"
                    hora_finalizacao_manual = "-"
                    if ocorr.get("data_finalizacao_manual") and ocorr.get("hora_finalizacao_manual"):
                        try:
                            # Criar datetime a partir das strings de data e hora manual
                            finalizacao_dt = criar_datetime_manual(
                                ocorr["data_finalizacao_manual"], 
                                ocorr["hora_finalizacao_manual"]
                            )
                            if finalizacao_dt:
                                data_finalizacao_manual = finalizacao_dt.strftime("%d-%m-%Y")
                                hora_finalizacao_manual = finalizacao_dt.strftime("%H:%M:%S")
                        except:
                            pass

                    status = ocorr.get("Status", "Finalizada")
                    cor = ocorr.get("Cor", "#34495e")

                except Exception as e:
                    st.error(f"Erro ao processar ocorr√™ncia (NF {ocorr.get('nota_fiscal', '-')}) ‚Äî {e}")
                    data_abertura_manual = hora_abertura_manual = "-"
                    data_finalizacao_manual = hora_finalizacao_manual = "-"
                    status = "Erro"
                    cor = "gray"

                with colunas[idx]:
                    # Adicionar indicador de e-mail enviado
                    email_abertura = "üìß E-mail abertura enviado" if ocorr.get('email_abertura_enviado', False) else ""
                    email_finalizacao = "üìß E-mail finaliza√ß√£o enviado" if ocorr.get('email_finalizacao_enviado', False) else ""
                    
                    st.markdown(
                        f"""
                        <div style='background-color:{cor};padding:10px;border-radius:10px;color:white;
                        box-shadow: 0 4px 10px rgba(0,0,0,0.3);margin-bottom:5px;min-height:250px;font-size:15px;'>
                        <strong>Ticket #:</strong> {ocorr.get('numero_ticket', 'N/A')}<br>
                        <strong>Status:</strong> <span style='background-color:#2c3e50;padding:4px 8px;
                        border-radius:1px;color:white;'>{status}</span><br>
                        {email_abertura}<br>{email_finalizacao}<br>
                        <strong>NF:</strong> {ocorr.get('nota_fiscal', '-')}<br>
                        <strong>Cliente:</strong> {ocorr.get('cliente', '-')}<br>
                        <strong>Destinat√°rio:</strong> {ocorr.get('destinatario', '-')}<br>
                        <strong>Focal:</strong> {ocorr.get('focal', '-')}<br>
                        <strong>Cidade:</strong> {ocorr.get('cidade', '-')}<br>
                        <strong>Motorista:</strong> {ocorr.get('motorista', '-')}<br>
                        <strong>Tipo:</strong> {ocorr.get('tipo_de_ocorrencia', '-')}<br>
                        <strong>Aberto por:</strong> {ocorr.get('responsavel', '-')}<br>
                        <strong>Finalizado por:</strong> {ocorr.get('finalizado_por', '-')}<br>
                        <strong>Data Abertura:</strong> {data_abertura_manual}<br>
                        <strong>Hora Abertura:</strong> {hora_abertura_manual}<br>
                        <strong>Data Finaliza√ß√£o:</strong> {data_finalizacao_manual}<br>
                        <strong>Hora Finaliza√ß√£o:</strong> {hora_finalizacao_manual}<br>
                        <strong>Perman√™ncia:</strong> {ocorr.get('permanencia_manual', '-')}<br>
                        <strong>Complementar:</strong> {ocorr.get('complementar', 'Sem complemento.')}<br>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )

# =========================
#     ABA 5 - TICKETS POR FOCAL
# =========================
with aba5:
    st.header("Tickets por Focal")
    
    focais_contagem = obter_focais_com_contagem()
    
    if not focais_contagem:
        st.info("‚ÑπÔ∏è Nenhuma ocorr√™ncia aberta no momento.")
    else:
        # Bot√µes de sele√ß√£o dos focais em linha
        st.subheader("üë§ Focais")

        cols_focais = st.columns(len(focais_contagem) + 1)

        # Bot√£o para limpar
        if cols_focais[0].button("Limpar sele√ß√£o"):
            st.session_state.focal_selecionado = None
            st.rerun()

        # Bot√µes de focais
        for i, (focal, contagem) in enumerate(focais_contagem):
            if cols_focais[i + 1].button(f"{focal} ({contagem})", key=f"focal_{focal}"):
                st.session_state.focal_selecionado = focal
                st.rerun()

        st.markdown("---")

        # Exibi√ß√£o das ocorr√™ncias
        if st.session_state.focal_selecionado:
            st.subheader(f"üìã Ocorr√™ncias de {st.session_state.focal_selecionado}")
            ocorrencias_focal = carregar_ocorrencias_por_focal(st.session_state.focal_selecionado)

            if not ocorrencias_focal:
                st.info(f"‚ÑπÔ∏è Nenhuma ocorr√™ncia aberta para {st.session_state.focal_selecionado}.")
            else:
                for linha in range(0, len(ocorrencias_focal), 4):
                    colunas = st.columns(4)
                    for i, ocorr in enumerate(ocorrencias_focal[linha:linha+4]):
                        with colunas[i]:
                            status = "Data manual ausente"
                            cor = "gray"
                            abertura_manual_formatada = "N√£o informada"
                            data_abertura_manual = ocorr.get("data_abertura_manual")
                            hora_abertura_manual = ocorr.get("hora_abertura_manual")

                            if data_abertura_manual and hora_abertura_manual:
                                try:
                                    dt_manual = criar_datetime_manual(data_abertura_manual, hora_abertura_manual)
                                    if dt_manual:
                                        abertura_manual_formatada = dt_manual.strftime("%d-%m-%Y %H:%M:%S")
                                        status, cor = classificar_ocorrencia_por_tempo(data_abertura_manual, hora_abertura_manual)
                                    else:
                                        status = "Erro"
                                except Exception as e:
                                    st.error(f"Erro na data/hora manual da NF {ocorr.get('nota_fiscal', '-')}: {e}")
                                    status = "Erro"

                            email_enviado = ocorr.get('email_abertura_enviado', False)
                            email_status = "üìß E-mail enviado" if email_enviado else ""
                            safe_idx = f"focal_{linha}_{i}_{ocorr.get('nota_fiscal', '')}"

                            st.markdown(
                                f"""
                                <div style='background-color:{cor};padding:10px;border-radius:10px;color:white;
                                box-shadow: 0 4px 10px rgba(0,0,0,0.3);margin-bottom:5px;font-size:15px;'>
                                <strong>Ticket #:</strong> {ocorr.get('numero_ticket', 'N/A')}<br>
                                <strong>Status:</strong> <span style='background-color:#2c3e50;padding:4px 8px;
                                border-radius:1px;color:white;'>{status}</span> {email_status}<br>
                                <strong>NF:</strong> {ocorr.get('nota_fiscal', '-')}<br>
                                <strong>Cliente:</strong> {ocorr.get('cliente', '-')}<br>
                                <strong>Destinat√°rio:</strong> {ocorr.get('destinatario', '-')}<br>
                                <strong>Cidade:</strong> {ocorr.get('cidade', '-')}<br>
                                <strong>Motorista:</strong> {ocorr.get('motorista', '-')}<br>
                                <strong>Tipo:</strong> {ocorr.get('tipo_de_ocorrencia', '-')}<br>
                                <strong>Aberto por:</strong> {ocorr.get('responsavel', '-')}<br>
                                <strong>Data Abertura:</strong> {abertura_manual_formatada.split(" ")[0] if abertura_manual_formatada != "N√£o informada" else 'N√£o informada'}<br>
                                <strong>Hora Abertura:</strong> {hora_abertura_manual or 'N√£o informada'}<br> 
                                <strong>Observa√ß√µes:</strong> {ocorr.get('observacoes', 'Sem observa√ß√µes.')}<br>
                                </div>
                                """,
                                unsafe_allow_html=True
                            )

                            with st.expander("Finalizar Ocorr√™ncia"):
                                data_atual = obter_data_hora_atual_brasil().strftime("%d-%m-%Y")
                                hora_atual = obter_data_hora_atual_brasil().strftime("%H:%M")
                                data_finalizacao_manual = st.text_input("Data Finaliza√ß√£o", value=data_atual, key=f"data_final_{safe_idx}")
                                hora_finalizacao_manual = st.text_input("Hora Finaliza√ß√£o", value=hora_atual, key=f"hora_final_{safe_idx}")

                                complemento_key = f"complemento_final_{safe_idx}"
                                if complemento_key not in st.session_state:
                                    st.session_state[complemento_key] = ""

                                complemento = st.text_area("Complementar", key=complemento_key, value=st.session_state[complemento_key])
                                finalizar_disabled = not complemento.strip()

                                if st.button("Finalizar", key=f"finalizar_{safe_idx}", disabled=finalizar_disabled):
                                    if finalizar_disabled:
                                        st.error("‚ùå O campo 'Complementar' √© obrigat√≥rio.")
                                    else:
                                        sucesso, mensagem = finalizar_ocorrencia(
                                            ocorr, complemento, data_finalizacao_manual, hora_finalizacao_manual
                                        )
                                        if sucesso:
                                            st.success(mensagem)
                                            time.sleep(2)
                                            st.rerun()
                                        else:
                                            st.error(mensagem)
        else:
            st.info("üëà Selecione um focal para ver suas ocorr√™ncias.")


# =========================
#     ABA 4 - CONFIGURA√á√ïES
# =========================
with aba4:
    st.header("Configura√ß√µes")
    
    # Se√ß√£o de troca de senha
    st.subheader("Alterar Senha")
    
    with st.form("form_alterar_senha"):
        senha_atual = st.text_input("Senha Atual", type="password")
        nova_senha = st.text_input("Nova Senha", type="password")
        confirmar_senha = st.text_input("Confirmar Nova Senha", type="password")
        
        alterar_senha = st.form_submit_button("Alterar Senha")
        
        if alterar_senha:
            if not senha_atual or not nova_senha or not confirmar_senha:
                st.error("‚ùå Todos os campos s√£o obrigat√≥rios.")
            elif nova_senha != confirmar_senha:
                st.error("‚ùå As senhas n√£o coincidem.")
            else:
                try:
                    # Verificar senha atual
                    usuario = st.session_state.username
                    response = supabase.table("usuarios").select("*").eq("nome_usuario", usuario).execute()
                    
                    if response.data:
                        usuario_data = response.data[0]
                        if verificar_senha(senha_atual, usuario_data["senha_hash"]):
                            # Atualizar senha
                            nova_senha_hash = hash_senha(nova_senha)
                            update_response = supabase.table("usuarios").update({
                                "senha_hash": nova_senha_hash
                            }).eq("nome_usuario", usuario).execute()
                            
                            if update_response.data:
                                st.success("‚úÖ Senha alterada com sucesso!")
                            else:
                                st.error("‚ùå Erro ao atualizar senha.")
                        else:
                            st.error("‚ùå Senha atual incorreta.")
                    else:
                        st.error("‚ùå Usu√°rio n√£o encontrado.")
                except Exception as e:
                    st.error(f"‚ùå Erro ao alterar senha: {e}")
    
    # Se√ß√£o de administra√ß√£o de usu√°rios (apenas para admin)
    if st.session_state.is_admin:
        st.subheader("Administra√ß√£o de Usu√°rios")
        
        # Tabs para diferentes opera√ß√µes
        admin_tab1, admin_tab2, admin_tab3 = st.tabs(["Listar Usu√°rios", "Adicionar Usu√°rio", "Editar/Excluir Usu√°rio"])
        
        with admin_tab1:
            try:
                response = supabase.table("usuarios").select("*").execute()
                if response.data:
                    usuarios = response.data
                    
                    # Criar DataFrame para exibi√ß√£o
                    df_usuarios = pd.DataFrame([
                        {
                            "Nome de Usu√°rio": u["nome_usuario"],
                            "Admin": "Sim" if u.get("is_admin", False) else "N√£o",
                            "√öltimo Login": u.get("ultimo_login", "-")
                        }
                        for u in usuarios
                    ])
                    
                    st.dataframe(df_usuarios)
                else:
                    st.info("Nenhum usu√°rio encontrado.")
            except Exception as e:
                st.error(f"Erro ao listar usu√°rios: {e}")
        
        with admin_tab2:
            with st.form("form_adicionar_usuario"):
                novo_usuario = st.text_input("Nome de Usu√°rio")
                nova_senha_usuario = st.text_input("Senha", type="password")
                confirmar_senha_usuario = st.text_input("Confirmar Senha", type="password")
                is_admin = st.checkbox("Usu√°rio Administrador")
                
                adicionar_usuario = st.form_submit_button("Adicionar Usu√°rio")
                
                if adicionar_usuario:
                    if not novo_usuario or not nova_senha_usuario or not confirmar_senha_usuario:
                        st.error("‚ùå Todos os campos s√£o obrigat√≥rios.")
                    elif nova_senha_usuario != confirmar_senha_usuario:
                        st.error("‚ùå As senhas n√£o coincidem.")
                    else:
                        try:
                            # Verificar se usu√°rio j√° existe
                            check_response = supabase.table("usuarios").select("*").eq("nome_usuario", novo_usuario).execute()
                            
                            if check_response.data:
                                st.error("‚ùå Nome de usu√°rio j√° existe.")
                            else:
                                # Criar novo usu√°rio
                                senha_hash = hash_senha(nova_senha_usuario)
                                insert_response = supabase.table("usuarios").insert({
                                    "nome_usuario": novo_usuario,
                                    "senha_hash": senha_hash,
                                    "is_admin": is_admin,
                                    "criado_em": obter_data_hora_atual_brasil().isoformat()
                                }).execute()
                                
                                if insert_response.data:
                                    st.success("‚úÖ Usu√°rio adicionado com sucesso!")
                                else:
                                    st.error("‚ùå Erro ao adicionar usu√°rio.")
                        except Exception as e:
                            st.error(f"‚ùå Erro ao adicionar usu√°rio: {e}")
        
        with admin_tab3:
            try:
                response = supabase.table("usuarios").select("*").execute()
                if response.data:
                    usuarios = response.data
                    nomes_usuarios = [u["nome_usuario"] for u in usuarios]
                    
                    usuario_selecionado = st.selectbox("Selecione um usu√°rio", nomes_usuarios)
                    
                    if usuario_selecionado:
                        usuario_data = next((u for u in usuarios if u["nome_usuario"] == usuario_selecionado), None)
                        
                        if usuario_data:
                            with st.form("form_editar_usuario"):
                                nova_senha_admin = st.text_input("Nova Senha (deixe em branco para n√£o alterar)", type="password")
                                is_admin_edit = st.checkbox("Usu√°rio Administrador", value=usuario_data.get("is_admin", False))
                                
                                col1, col2 = st.columns(2)
                                with col1:
                                    editar_usuario = st.form_submit_button("Atualizar Usu√°rio")
                                with col2:
                                    excluir_usuario = st.form_submit_button("Excluir Usu√°rio", type="primary", help="Esta a√ß√£o n√£o pode ser desfeita")
                                
                                if editar_usuario:
                                    try:
                                        update_data = {"is_admin": is_admin_edit}
                                        
                                        if nova_senha_admin:
                                            update_data["senha_hash"] = hash_senha(nova_senha_admin)
                                        
                                        update_response = supabase.table("usuarios").update(update_data).eq("nome_usuario", usuario_selecionado).execute()
                                        
                                        if update_response.data:
                                            st.success("‚úÖ Usu√°rio atualizado com sucesso!")
                                        else:
                                            st.error("‚ùå Erro ao atualizar usu√°rio.")
                                    except Exception as e:
                                        st.error(f"‚ùå Erro ao atualizar usu√°rio: {e}")
                                
                                if excluir_usuario:
                                    if usuario_selecionado == st.session_state.username:
                                        st.error("‚ùå Voc√™ n√£o pode excluir seu pr√≥prio usu√°rio.")
                                    else:
                                        try:
                                            delete_response = supabase.table("usuarios").delete().eq("nome_usuario", usuario_selecionado).execute()
                                            
                                            if delete_response.data:
                                                st.success("‚úÖ Usu√°rio exclu√≠do com sucesso!")
                                                time.sleep(2)
                                                st.rerun()
                                            else:
                                                st.error("‚ùå Erro ao excluir usu√°rio.")
                                        except Exception as e:
                                            st.error(f"‚ùå Erro ao excluir usu√°rio: {e}")
                else:
                    st.info("Nenhum usu√°rio encontrado.")
            except Exception as e:
                st.error(f"Erro ao carregar usu√°rios: {e}")

# =========================
#     ABA 6 - NOTIFICA√á√ïES POR E-MAIL (APENAS ADMIN)
# =========================
if st.session_state.is_admin and 'aba6' in locals():
    with aba6:
        st.header("Notifica√ß√µes por E-mail")
        
        st.markdown("""
        ### Sistema de Notifica√ß√£o Autom√°tica
        
        Este sistema envia e-mails autom√°ticos para clientes que possuem ocorr√™ncias abertas h√° mais de 30 minutos.
        
        Os e-mails s√£o enviados utilizando:
        - **Remetente:** ticket@clicklogtransportes.com.br
        - **Servidor SMTP:** smtp.kinghost.net
        
        Os destinat√°rios s√£o obtidos da planilha de clientes:
        - **E-mail principal:** Coluna C (enviar_para_email)
        - **E-mails em c√≥pia (CC):** Coluna D (email_copia), separados por ponto e v√≠rgula
        """)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Testar Conex√£o SMTP")
            if st.button("Testar Conex√£o"):
                with st.spinner("Testando conex√£o com servidor SMTP..."):
                    sucesso, mensagem = testar_conexao_smtp()
                    if sucesso:
                        st.success(mensagem)
                    else:
                        st.error(mensagem)
        
        with col2:
            st.subheader("Enviar Notifica√ß√µes Manualmente")
            if st.button("Enviar Notifica√ß√µes Agora"):
                with st.spinner("Verificando ocorr√™ncias e enviando e-mails..."):
                    resultados = notificar_ocorrencias_abertas()
                    
                    # Exibir resultados
                    for resultado in resultados:
                        if resultado.get("status") == "info":
                            st.info(resultado.get("mensagem"))
                        elif resultado.get("status") == "sucesso":
                            st.success(f"‚úÖ E-mail enviado para {resultado.get('cliente')} - Ticket {resultado.get('ticket')} - NF {resultado.get('nota_fiscal')}")
                        else:
                            st.error(f"‚ùå Erro ao enviar para {resultado.get('cliente')}: {resultado.get('mensagem')}")

        # Exibir hist√≥rico de e-mails enviados
        st.subheader("Hist√≥rico de E-mails Enviados")

        # Buscar dados da tabela
        resposta = supabase.table("emails_enviados").select("*").order("data_hora", desc=True).execute()
        dados = resposta.data

        if dados:
            df_historico = pd.DataFrame(dados)
            
            # Formatar coluna de data/hora se necess√°rio
            if "data_hora" in df_historico.columns:
                df_historico["data_hora"] = pd.to_datetime(df_historico["data_hora"]).dt.strftime("%d/%m/%Y %H:%M:%S")
            
            st.dataframe(df_historico)
        else:
            st.info("Nenhum e-mail enviado ainda.")

# Verificar e enviar e-mails para ocorr√™ncias abertas h√° mais de 30 minutos
ocorrencias_abertas = carregar_ocorrencias_abertas()
for ocorr in ocorrencias_abertas:
    if not ocorr.get("email_abertura_enviado", False):
        verificar_e_enviar_email_abertura(ocorr)

# =========================
#     ABA 8 - ESTAT√çSTICAS
# =========================
with aba8:
    st.header("üìä Estat√≠sticas de Ocorr√™ncias Finalizadas")

    # Carrega as ocorr√™ncias finalizadas
    ocorrencias_finalizadas = carregar_ocorrencias_finalizadas()

    if not ocorrencias_finalizadas:
        st.info("‚ÑπÔ∏è Nenhuma ocorr√™ncia finalizada para gerar estat√≠sticas.")
        st.stop()

    df_finalizadas = pd.DataFrame(ocorrencias_finalizadas)

    # --- Limpeza e convers√µes ---
    df_finalizadas["data_hora_abertura"] = pd.to_datetime(
        df_finalizadas.get("abertura_ticket") or df_finalizadas.get("abertura_timestamp"), errors="coerce"
    )
    df_finalizadas["data_hora_finalizacao"] = pd.to_datetime(df_finalizadas["data_hora_finalizacao"], errors="coerce")
    df_finalizadas = df_finalizadas.dropna(subset=["data_hora_abertura", "data_hora_finalizacao"])

    # Calcula tempo de perman√™ncia
   # Remove timezone (caso exista)
    df_finalizadas["data_hora_abertura"] = df_finalizadas["data_hora_abertura"].dt.tz_localize(None)
    df_finalizadas["data_hora_finalizacao"] = df_finalizadas["data_hora_finalizacao"].dt.tz_localize(None)

    # Calcula perman√™ncia
    df_finalizadas["permanencia_horas"] = (
        df_finalizadas["data_hora_finalizacao"] - df_finalizadas["data_hora_abertura"]
    ).dt.total_seconds() / 3600

    # --- Estat√≠sticas Gerais ---
    st.subheader("‚è±Ô∏è Tempo M√©dio de Perman√™ncia")
    tempo_medio = df_finalizadas["permanencia_horas"].mean()
    st.metric("Tempo M√©dio de Perman√™ncia (h)", f"{tempo_medio:.2f} h")

    # --- Gr√°fico por Tipo de Ocorr√™ncia ---
    st.subheader("üìå Ocorr√™ncias por Tipo")
    tipo_counts = df_finalizadas["tipo_de_ocorrencia"].value_counts()
    st.bar_chart(tipo_counts)

    # --- Gr√°fico por Cliente ---
    st.subheader("üè¢ Ocorr√™ncias por Cliente")
    cliente_counts = df_finalizadas["cliente"].value_counts()
    st.bar_chart(cliente_counts)

    # --- Gr√°fico de Tempo M√©dio por Focal ---
    st.subheader("üë§ Tempo M√©dio por Focal")
    tempo_por_focal = df_finalizadas.groupby("focal")["permanencia_horas"].mean().sort_values(ascending=False)
    st.bar_chart(tempo_por_focal)


# =========================
#     ABA 7 - CADASTROS
# =========================
with aba7:
    st.header("Cadastros")
    
    # Criar abas dentro da aba Cadastros
    cadastro_tab1, cadastro_tab2, cadastro_tab3, cadastro_tab4 = st.tabs(["Motoristas", "Cidades", "Clientes", "Configura√ß√µes de E-mail"])
    
    # Aba de Cadastro de Motoristas
    with cadastro_tab1:
        st.subheader("Cadastro de Motoristas")
        
        # Formul√°rio para cadastro de motoristas
        with st.form("form_cadastro_motorista", clear_on_submit=True):
            motorista_nome = st.text_input("Nome do Motorista (LETRAS MAI√öSCULAS)", key="motorista_nome")
            
            submit_motorista = st.form_submit_button("Cadastrar Motorista")
        
        # Processamento do formul√°rio de motoristas
        if submit_motorista:
            if not motorista_nome:
                st.error("‚ùå Por favor, informe o nome do motorista.")
            elif not validar_texto_maiusculo(motorista_nome):
                st.error("‚ùå O nome do motorista deve estar em LETRAS MAI√öSCULAS.")
            else:
                sucesso, mensagem = inserir_motorista(motorista_nome)
                if sucesso:
                    st.success(mensagem)
                    # Recarregar a lista de motoristas
                    motoristas = carregar_motoristas_supabase()
                else:
                    st.error(mensagem)
        
        # Exibir lista de motoristas cadastrados
        st.subheader("Motoristas Cadastrados")
        motoristas_atuais = carregar_motoristas_supabase()
        if motoristas_atuais:
            for motorista in motoristas_atuais:
                st.text(motorista)
        else:
            st.info("Nenhum motorista cadastrado.")
    
    # Aba de Cadastro de Cidades
    with cadastro_tab2:
        st.subheader("Cadastro de Cidades")
        
        # Formul√°rio para cadastro de cidades
        with st.form("form_cadastro_cidade", clear_on_submit=True):
            cidade_nome = st.text_input("Nome da Cidade", key="cidade_nome")
            
            submit_cidade = st.form_submit_button("Cadastrar Cidade")
        
        # Processamento do formul√°rio de cidades
        if submit_cidade:
            if not cidade_nome:
                st.error("‚ùå Por favor, informe o nome da cidade.")
            else:
                sucesso, mensagem = inserir_cidade(cidade_nome)
                if sucesso:
                    st.success(mensagem)
                    # Recarregar a lista de cidades
                    cidades = carregar_cidades_supabase()
                else:
                    st.error(mensagem)
        
        # Exibir lista de cidades cadastradas
        st.subheader("Cidades Cadastradas")
        cidades_atuais = carregar_cidades_supabase()
        if cidades_atuais:
            for cidade in cidades_atuais:
                st.text(cidade)
        else:
            st.info("Nenhuma cidade cadastrada.")
    
    # Aba de Cadastro de Clientes
    with cadastro_tab3:
        st.subheader("Cadastro de Clientes")
        
        # Carregar lista de focais
        focal = carregar_focal_supabase()
        
        # Formul√°rio para cadastro de clientes
        with st.form("form_cadastro_cliente", clear_on_submit=True):
            cliente_nome = st.text_input("Nome do Cliente (LETRAS MAI√öSCULAS)", key="cliente_nome")
            
            # Sele√ß√£o de focal
            focal_selecionado = st.selectbox("Focal Respons√°vel", options=focal, index=None, key="focal_cliente")
            
            # Checkbox para receber e-mails
            receber_emails = st.checkbox("Cliente deve receber e-mails de abertura/finaliza√ß√£o", key="receber_emails")
            
            # Campos de e-mail
            email_principal = st.text_input("E-mail Principal", key="email_principal")
            email_copia = st.text_input("E-mails em C√≥pia (separados por ;)", key="email_copia")
            
            submit_cliente = st.form_submit_button("Cadastrar Cliente")
        
        # Processamento do formul√°rio de clientes
        if submit_cliente:
            erros = []
            
            if not cliente_nome:
                erros.append("Por favor, informe o nome do cliente.")
            elif not validar_texto_maiusculo(cliente_nome):
                erros.append("O nome do cliente deve estar em LETRAS MAI√öSCULAS.")
            
            if not focal_selecionado:
                erros.append("Por favor, selecione um focal respons√°vel.")
            
            if receber_emails:
                if not email_principal:
                    erros.append("Por favor, informe o e-mail principal do cliente.")
                elif not validar_email(email_principal):
                    erros.append("O e-mail principal informado n√£o √© v√°lido.")
                
                if email_copia and not validar_emails_multiplos(email_copia):
                    erros.append("Um ou mais e-mails em c√≥pia n√£o s√£o v√°lidos.")
            
            if erros:
                for erro in erros:
                    st.error(f"‚ùå {erro}")
            else:
                sucesso, mensagem = inserir_cliente(
                    cliente_nome, 
                    focal_selecionado, 
                    receber_emails, 
                    email_principal if receber_emails else "", 
                    email_copia if receber_emails else ""
                )
                
                if sucesso:
                    st.success(mensagem)
                    # Recarregar a lista de clientes
                    df_clientes = carregar_clientes_supabase()
                    clientes = df_clientes["cliente"].tolist()
                else:
                    st.error(mensagem)
        
        # Exibir lista de clientes cadastrados
        st.subheader("Clientes Cadastrados")
        df_clientes_atuais = carregar_clientes_supabase()
        if not df_clientes_atuais.empty:
            st.dataframe(df_clientes_atuais)
        else:
            st.info("Nenhum cliente cadastrado.")
    
    # Aba de Configura√ß√µes de E-mail
    with cadastro_tab4:
        st.subheader("Configura√ß√µes de Tempo de Envio de E-mail")
        
        # Carregar configura√ß√£o atual
        tempo_atual = carregar_tempo_envio_email()
        
        # Slider para configurar o tempo de envio
        tempo_envio = st.slider(
            "Tempo de envio dos e-mails (minutos)",
            min_value=1,
            max_value=60,
            value=tempo_atual,
            step=1,
            key="tempo_envio_slider"
        )
        
        # Bot√£o para salvar configura√ß√£o
        if st.button("Salvar Configura√ß√£o"):
            sucesso, mensagem = atualizar_tempo_envio_email(tempo_envio)
            if sucesso:
                st.success(mensagem)
            else:
                st.error(mensagem)
        
        st.info(f"Configura√ß√£o atual: E-mails ser√£o enviados ap√≥s {tempo_atual} minutos.")